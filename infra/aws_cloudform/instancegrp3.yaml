AWSTemplateFormatVersion: 2010-09-09
Description: projet1 instance ADM
Parameters:
  KeyName:
    Type: String
    Default: projet1grp3key
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
#    Type: 'AWS::EC2::KeyPair::KeyName'
  SSHLocation:
    Description: ' The IP address range that can be used to SSH to the EC2 instances'
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
  VpcId:
    Type: String
#    Type: AWS::EC2::VPC::Id
    Description: 'The VPC ID'
  SubnetIdPub:
    Type: String
#    Type: AWS::EC2::Subnet::Id
    Description: 'The Subnet ID public'
  SubnetIdPriv:
    Type: String
#    Type: AWS::EC2::Subnet::Id
    Description: 'The Subnet ID private'
  PrivateIP:
    Type: String
    Description: 'Exemple ip 10.80.140.x'
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})
  TypeName:
    Type: String
    Description: 'Type de serveur'
    AllowedValues:
      - jenkins
      - nexus
      - qcmdev
      - qcmqua
      - qcmprod
  IngressPort:
    Type: String
    Description: 'Port administration jenkins (8080) ou nexus(8081)'
    AllowedValues:
      - '8080'
      - '8081'
      - '5000'
  Urlscript:
    Type: String
    Description: 'command du script'
#    AllowedValues:
#      - 'sudo wget -O /tmp/install_jenkins.sh https://raw.githubusercontent.com/KevinGit31/depot_projet_1_file_rouge/dev/infra/install_jenkins.sh && chmod +x /tmp/install_jenkins.sh && sudo /bin/bash /tmp/install_jenkins.sh'
#      - 'sudo wget -O /tmp/install_nexus.sh https://raw.githubusercontent.com/KevinGit31/depot_projet_1_file_rouge/dev/infra/install_nexus.sh && chmod +x /tmp/install_nexus.sh && sudo /bin/bash /tmp/install_nexus.sh'
#      - 'sudo echo ""'
  Environnement:
    Type: String
    Description: 'Environnement type'
    AllowedValues:
      - 'dev'
      - 'qua'
      - 'main'
  SecurityGroupNameList:
#    Type: String
    Type: 'List<AWS::EC2::SecurityGroup::Id>'
    Description: 'The Security Group'
  SecurityGroupId:
    Type: String
#    Type: 'AWS::EC2::SecurityGroup::Id'
    Description: 'The Security Group ID'
  AnsibleKey:
    Type: String
    Description: 'clé Ansible vault password'
  JenkinsKey:
    Type: String
    Description: 'clé jenkins OS password'
  DevOpsKey:
    Type: String
    Description: 'clé devops OS password'
  RootKey:
    Type: String
    Description: 'clé root OS password'
  AWSAccessKeyId:
    Type: String
    Description: 'aws_access_key_id'
  AWSSecretAccessKeyId:
    Type: String
    Description: 'aws_secret_access_key'
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
      - t1.micro
      - t2.nano
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
      - m1.small
      - m1.medium
      - m1.large
      - m1.xlarge
      - m2.xlarge
      - m2.2xlarge
      - m2.4xlarge
      - m3.medium
      - m3.large
      - m3.xlarge
      - m3.2xlarge
      - m4.large
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m4.10xlarge
      - c1.medium
      - c1.xlarge
      - c3.large
      - c3.xlarge
      - c3.2xlarge
      - c3.4xlarge
      - c3.8xlarge
      - c4.large
      - c4.xlarge
      - c4.2xlarge
      - c4.4xlarge
      - c4.8xlarge
      - g2.2xlarge
      - g2.8xlarge
      - r3.large
      - r3.xlarge
      - r3.2xlarge
      - r3.4xlarge
      - r3.8xlarge
      - i2.xlarge
      - i2.2xlarge
      - i2.4xlarge
      - i2.8xlarge
      - d2.xlarge
      - d2.2xlarge
      - d2.4xlarge
      - d2.8xlarge
      - hi1.4xlarge
      - hs1.8xlarge
      - cr1.8xlarge
      - cc2.8xlarge
      - cg1.4xlarge
    ConstraintDescription: must be a valid EC2 instance type.
Mappings:
  AWSInstanceType2Arch:
    t1.micro:
      Arch: HVM64
    t2.nano:
      Arch: HVM64
    t2.micro:
      Arch: HVM64
    t2.small:
      Arch: HVM64
    t2.medium:
      Arch: HVM64
    t2.large:
      Arch: HVM64
    m1.small:
      Arch: HVM64
    m1.medium:
      Arch: HVM64
    m1.large:
      Arch: HVM64
    m1.xlarge:
      Arch: HVM64
    m2.xlarge:
      Arch: HVM64
    m2.2xlarge:
      Arch: HVM64
    m2.4xlarge:
      Arch: HVM64
    m3.medium:
      Arch: HVM64
    m3.large:
      Arch: HVM64
    m3.xlarge:
      Arch: HVM64
    m3.2xlarge:
      Arch: HVM64
    m4.large:
      Arch: HVM64
    m4.xlarge:
      Arch: HVM64
    m4.2xlarge:
      Arch: HVM64
    m4.4xlarge:
      Arch: HVM64
    m4.10xlarge:
      Arch: HVM64
    c1.medium:
      Arch: HVM64
    c1.xlarge:
      Arch: HVM64
    c3.large:
      Arch: HVM64
    c3.xlarge:
      Arch: HVM64
    c3.2xlarge:
      Arch: HVM64
    c3.4xlarge:
      Arch: HVM64
    c3.8xlarge:
      Arch: HVM64
    c4.large:
      Arch: HVM64
    c4.xlarge:
      Arch: HVM64
    c4.2xlarge:
      Arch: HVM64
    c4.4xlarge:
      Arch: HVM64
    c4.8xlarge:
      Arch: HVM64
    g2.2xlarge:
      Arch: HVMG2
    g2.8xlarge:
      Arch: HVMG2
    r3.large:
      Arch: HVM64
    r3.xlarge:
      Arch: HVM64
    r3.2xlarge:
      Arch: HVM64
    r3.4xlarge:
      Arch: HVM64
    r3.8xlarge:
      Arch: HVM64
    i2.xlarge:
      Arch: HVM64
    i2.2xlarge:
      Arch: HVM64
    i2.4xlarge:
      Arch: HVM64
    i2.8xlarge:
      Arch: HVM64
    d2.xlarge:
      Arch: HVM64
    d2.2xlarge:
      Arch: HVM64
    d2.4xlarge:
      Arch: HVM64
    d2.8xlarge:
      Arch: HVM64
    hi1.4xlarge:
      Arch: HVM64
    hs1.8xlarge:
      Arch: HVM64
    cr1.8xlarge:
      Arch: HVM64
    cc2.8xlarge:
      Arch: HVM64
  AWSInstanceType2NATArch:
    t1.micro:
      Arch: NATHVM64
    t2.nano:
      Arch: NATHVM64
    t2.micro:
      Arch: NATHVM64
    t2.small:
      Arch: NATHVM64
    t2.medium:
      Arch: NATHVM64
    t2.large:
      Arch: NATHVM64
    m1.small:
      Arch: NATHVM64
    m1.medium:
      Arch: NATHVM64
    m1.large:
      Arch: NATHVM64
    m1.xlarge:
      Arch: NATHVM64
    m2.xlarge:
      Arch: NATHVM64
    m2.2xlarge:
      Arch: NATHVM64
    m2.4xlarge:
      Arch: NATHVM64
    m3.medium:
      Arch: NATHVM64
    m3.large:
      Arch: NATHVM64
    m3.xlarge:
      Arch: NATHVM64
    m3.2xlarge:
      Arch: NATHVM64
    m4.large:
      Arch: NATHVM64
    m4.xlarge:
      Arch: NATHVM64
    m4.2xlarge:
      Arch: NATHVM64
    m4.4xlarge:
      Arch: NATHVM64
    m4.10xlarge:
      Arch: NATHVM64
    c1.medium:
      Arch: NATHVM64
    c1.xlarge:
      Arch: NATHVM64
    c3.large:
      Arch: NATHVM64
    c3.xlarge:
      Arch: NATHVM64
    c3.2xlarge:
      Arch: NATHVM64
    c3.4xlarge:
      Arch: NATHVM64
    c3.8xlarge:
      Arch: NATHVM64
    c4.large:
      Arch: NATHVM64
    c4.xlarge:
      Arch: NATHVM64
    c4.2xlarge:
      Arch: NATHVM64
    c4.4xlarge:
      Arch: NATHVM64
    c4.8xlarge:
      Arch: NATHVM64
    g2.2xlarge:
      Arch: NATHVMG2
    g2.8xlarge:
      Arch: NATHVMG2
    r3.large:
      Arch: NATHVM64
    r3.xlarge:
      Arch: NATHVM64
    r3.2xlarge:
      Arch: NATHVM64
    r3.4xlarge:
      Arch: NATHVM64
    r3.8xlarge:
      Arch: NATHVM64
    i2.xlarge:
      Arch: NATHVM64
    i2.2xlarge:
      Arch: NATHVM64
    i2.4xlarge:
      Arch: NATHVM64
    i2.8xlarge:
      Arch: NATHVM64
    d2.xlarge:
      Arch: NATHVM64
    d2.2xlarge:
      Arch: NATHVM64
    d2.4xlarge:
      Arch: NATHVM64
    d2.8xlarge:
      Arch: NATHVM64
    hi1.4xlarge:
      Arch: NATHVM64
    hs1.8xlarge:
      Arch: NATHVM64
    cr1.8xlarge:
      Arch: NATHVM64
    cc2.8xlarge:
      Arch: NATHVM64
  AWSRegionArch2AMI:
    af-south-1:
      HVM64: ami-064cc455f8a1ef504
      HVMG2: NOT_SUPPORTED
    ap-east-1:
      HVM64: ami-f85b1989
      HVMG2: NOT_SUPPORTED
    ap-northeast-1:
      HVM64: ami-0b2c2a754d5b4da22
      HVMG2: ami-09d0e0e099ecabba2
    ap-northeast-2:
      HVM64: ami-0493ab99920f410fc
      HVMG2: NOT_SUPPORTED
    ap-northeast-3:
      HVM64: ami-01344f6f63a4decc1
      HVMG2: NOT_SUPPORTED
    ap-south-1:
      HVM64: ami-03cfb5e1fb4fac428
      HVMG2: ami-0244c1d42815af84a
    ap-southeast-1:
      HVM64: ami-0ba35dc9caf73d1c7
      HVMG2: ami-0e46ce0d6a87dc979
    ap-southeast-2:
      HVM64: ami-0ae99b503e8694028
      HVMG2: ami-0c0ab057a101d8ff2
    ca-central-1:
      HVM64: ami-0803e21a2ec22f953
      HVMG2: NOT_SUPPORTED
    cn-north-1:
      HVM64: ami-07a3f215cc90c889c
      HVMG2: NOT_SUPPORTED
    cn-northwest-1:
      HVM64: ami-0a3b3b10f714a0ff4
      HVMG2: NOT_SUPPORTED
    eu-central-1:
      HVM64: ami-0474863011a7d1541
      HVMG2: ami-0aa1822e3eb913a11
    eu-north-1:
      HVM64: ami-0de4b8910494dba0f
      HVMG2: ami-32d55b4c
    eu-south-1:
      HVM64: ami-08427144fe9ebdef6
      HVMG2: NOT_SUPPORTED
    eu-west-1:
      HVM64: ami-015232c01a82b847b
      HVMG2: ami-0d5299b1c6112c3c7
    eu-west-2:
#IMG Amazon Linux 2 AMI (HVM), SSD Volume Type - ami-03ac5a9b225e99b02 (64 bits x86)
      HVM64: ami-03ac5a9b225e99b02
#IMG Ubuntu Server 20.04 LTS (HVM), SSD Volume Type - ami-0194c3e07668a7e36 (64 bits x86)
#      HVM64: ami-0194c3e07668a7e36
      HVMG2: NOT_SUPPORTED
    eu-west-3:
      HVM64: ami-0caf07637eda19d9c
      HVMG2: NOT_SUPPORTED
    me-south-1:
      HVM64: ami-0744743d80915b497
      HVMG2: NOT_SUPPORTED
    sa-east-1:
      HVM64: ami-0a52e8a6018e92bb0
      HVMG2: NOT_SUPPORTED
    us-east-1:
      HVM64: ami-032930428bf1abbff
      HVMG2: ami-0aeb704d503081ea6
    us-east-2:
      HVM64: ami-027cab9a7bf0155df
      HVMG2: NOT_SUPPORTED
    us-west-1:
      HVM64: ami-088c153f74339f34c
      HVMG2: ami-0a7fc72dc0e51aa77
    us-west-2:
      HVM64: ami-01fee56b22f308154
      HVMG2: ami-0fe84a5b4563d8f27

Resources:
  Grp3SecurityGroupingress:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref SecurityGroupId
      IpProtocol: tcp
      FromPort: !Ref IngressPort
      ToPort: !Ref IngressPort
      CidrIp: 0.0.0.0/0

  EC2Instance:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: !Ref InstanceType
      SubnetId: !Ref SubnetIdPub
      SecurityGroupIds:
        - !Ref SecurityGroupId
      KeyName: !Ref KeyName
      # NetworkInterfaces:
      # NetworkInterfaces:
      # # - NetworkInterfaceId:
      # #    Ref: NetworkInterfaceAttachment
      # #   DeviceIndex: '0'
      # # - NetworkInterfaceId:
      # #     Ref: Eth0
      # #   DeviceIndex: '0'
      # #   AssociatePublicIpAddress: true
      # - NetworkInterfaceId:
      #     Ref: Eth1
      #   DeviceIndex: '1'
      #   AssociatePublicIpAddress: false
#      - AssociatePublicIpAddress: false
      # - NetworkInterfaceId: !Ref 'Eth0'
      #   DeviceIndex: '0'
#      - NetworkInterfaceId: !Ref 'Eth0'
      ImageId: !FindInMap
        - AWSRegionArch2AMI
        - !Ref 'AWS::Region'
        - !FindInMap
          - AWSInstanceType2Arch
          - !Ref InstanceType
          - Arch
      UserData:
        #METHODE1
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          echo ${PrivateIP} > /tmp/ip.txt
          echo ${JenkinsKey} > /tmp/jenkinskey.txt
          echo ${RootKey} > /tmp/root.txt
          echo ${DevOpsKey} > /tmp/devopsuserkey.txt
          echo ${AnsibleKey} > /tmp/ansiblekey.txt
          echo ${Environnement} > /tmp/env.txt

          if [[ ${PrivateIP} =~ 10.80.140.10 ]]; then
              CMDSCRIPT=$(wget -O /tmp/ssh.py https://github.com/KevinGit31/depot_projet_1_file_rouge/raw/${Environnement}/infra/ssh.py && chmod +x /tmp/ssh.py)
              CMDSCRIPT4=$(wget -O /tmp/ssh.sh https://github.com/KevinGit31/depot_projet_1_file_rouge/raw/${Environnement}/infra/ssh.sh && chmod +x /tmp/ssh.sh)
              CMDSCRIPT1=$(wget -O /tmp/install_jenkins.sh https://raw.githubusercontent.com/KevinGit31/depot_projet_1_file_rouge/${Environnement}/infra/install_jenkins.sh && chmod +x /tmp/install_jenkins.sh && /bin/bash /tmp/install_jenkins.sh)
              su - userjenkins -c 'cd /home/userjenkins && wget -O dev.zip https://github.com/KevinGit31/depot_projet_1_file_rouge/archive/refs/heads/${Environnement}.zip && unzip dev.zip && mv depot_projet_1_file_rouge* depot_projet_1_file_rouge && chmod +x /home/userjenkins/depot_projet_1_file_rouge/infra/ansvlt.sh && exit'
              su - devops -c 'cd /tmp && /bin/bash ssh.sh && exit'
              su - userjenkins -c 'mkdir ~/.aws && cd ~/.aws && echo "[default]" >> credentials && echo "aws_access_key_id=${AWSAccessKeyId}" >> credentials && echo "aws_secret_access_key=${AWSSecretAccessKeyId}" >> credentials && exit'
              su - userjenkins -c 'cd ~/.aws && echo "[default]" >> config && echo "region=${AWS::Region}" >> config && echo "output=json" >> config && exit'
              su - userjenkins -c 'cd /home/userjenkin && ansible-vault encrypt_string "${DevOpsKey}" --name "secret_devops" >> all && exit'
              su - userjenkins -c 'cd /home/userjenkin && ansible-vault encrypt_string "${RootKey}" --name "ROOTKEY" >> all && exit'
              su - userjenkins -c 'cd /home/userjenkin && ansible-vault encrypt_string "${KeyName}" --name "KEYNAME" >> all && exit'
              su - userjenkins -c 'cd /home/userjenkin && ansible-vault encrypt_string "${TypeName}" --name "TypeName" >> all && exit'
              su - userjenkins -c 'cd /home/userjenkin && ansible-vault encrypt_string "${AWS::Region}" --name "REGION" >> all && exit'
              su - userjenkins -c 'cd /home/userjenkin && ansible-vault encrypt_string "${SubnetIdPub}" --name "SubnetIdPub" >> all && exit'
              su - userjenkins -c 'cd /home/userjenkin && ansible-vault encrypt_string "${SubnetIdPriv}" --name "SubnetIdPriv" >> all && exit'
              su - userjenkins -c 'cd /home/userjenkin && ansible-vault encrypt_string "${VpcId}" --name "VpcId" >> all && exit'
              su - userjenkins -c 'cd /home/userjenkin && ansible-vault encrypt_string "${PrivateIP}" --name "PrivateIP" >> all && exit'
              su - userjenkins -c 'cd /home/userjenkin && ansible-vault encrypt_string "$IngressPort" --name "IngressPort" >> all && exit'
              su - userjenkins -c 'cd /home/userjenkin && ansible-vault encrypt_string "${SecurityGroupNameList}" --name "SecurityGroupNameList" >> all && exit'
              su - userjenkins -c 'cd /home/userjenkin && ansible-vault encrypt_string "${Urlscript}" --name "Urlscript" >> all && exit'
              su - userjenkins -c 'cd /home/userjenkin && ansible-vault encrypt_string "${SecurityGroupId}" --name "SecurityGroupId" >> all && exit'
              su - userjenkins -c 'cd /home/userjenkin && ansible-vault encrypt_string "${InstanceType}" --name "InstanceType" >> all && exit'
              if [[ ${Environnement} = "main" ]]; then
                CONVENV=prod
                su - userjenkins -c 'cd /home/userjenkin/depot_projet_1_file_rouge/infra/ansible/inventory/$CONVENV/group_vars/all && ansible-vault encrypt_string "CONVENV" --name "ENVIRONNEMENT" >> all && exit'
              else
                su - userjenkins -c 'cd /home/userjenkin/depot_projet_1_file_rouge/infra/ansible/inventory/dev/group_vars/all && ansible-vault encrypt_string "${Environnement}" --name "ENVIRONNEMENT" >> all && exit'
              fi
              su - userjenkins -c 'yes | cp -rf /home/userjenkin/all /home/userjenkin/depot_projet_1_file_rouge/infra/ansible/inventory/dev/group_vars/all/all'
              su - userjenkins -c 'yes | cp -rf /home/userjenkin/all /home/userjenkin/depot_projet_1_file_rouge/infra/ansible/inventory/qua/group_vars/all/all'
              su - userjenkins -c 'yes | cp -rf /home/userjenkin/all /home/userjenkin/depot_projet_1_file_rouge/infra/ansible/inventory/prod/group_vars/all/all'
              elif [[ ${PrivateIP} =~ 10.80.140.11 ]]; then
              CMDSCRIPT2=$(wget -O /tmp/install_nexus.sh https://raw.githubusercontent.com/KevinGit31/depot_projet_1_file_rouge/${Environnement}/infra/install_nexus.sh && chmod +x /tmp/install_nexus.sh && /bin/bash /tmp/install_nexus.sh)
          elif [[ ${PrivateIP} =~ 10.80.110.* || ${PrivateIP} =~ 10.80.120.* || ${PrivateIP} =~ 10.80.130.* ]]; then
          #    CMDSCRIPT3=$(wget -O /tmp/install_qcm.sh https://raw.githubusercontent.com/KevinGit31/depot_projet_1_file_rouge/${Environnement}/infra/install_qcm.sh && chmod +x /tmp/install_qcm.sh && /bin/bash /tmp/install_qcm.sh)
          fi
          echo "root:${RootKey}" | chpasswd
          #Nettoyage /tmp
          sudo rm -f /tmp/jenkinskey.txt /tmp/ansiblekey.txt /tmp/root.txt /tmp/devopsuserkey.txt

        #METHODE2
        # Fn::Base64:  {
        #   "Fn::Join": [
        #     "",
        #     [
        #       "#!/bin/bash -xe\n",
        #       "echo ",
        #       {
        #         "Ref": "PrivateIP"
        #       },
        #       "> /tmp/ip.txt\n",
        #       "echo ",
        #       {
        #         "Ref": "AnsibleKey"
        #       },
        #       "> /tmp/ansiblekey.txt\n",
        #       "echo ",
        #       {
        #         "Ref": "JenkinsKey"
        #       },
        #       "> /tmp/jenkinskey.txt\n",
        #       "echo ",
        #       {
        #         "Ref": "DevOpsKey"
        #       },
        #       "> /tmp/devopsuserkey.txt\n",
        #       "echo ",
        #       {
        #         "Ref": "RootKey"
        #       },
        #       "> /tmp/root.txt\n",
        #       "echo ",
        #       {
        #         "Ref": "Environnement"
        #       },
        #       "> /tmp/env.txt\n",
        #       "sudo wget -O /tmp/prepare.sh https://raw.githubusercontent.com/KevinGit31/depot_projet_1_file_rouge/dev/infra/prepare.sh && chmod +x /tmp/prepare.sh && sudo /bin/bash /tmp/prepare.sh\n"
        #     ]
        #   ]
        # }

          # #!/bin/bash -xe
          # -- |
          #  -
          # sudo hostname myhost
          # echo myhost > /etc/hostname
          # HNAME=$(echo hostname | awk 1 ORS='' )
          # if [[ -n "$HNAME | grep "jenkins" ]]; then
          # CMDSCRIPT1=$(sudo wget -O /tmp/install_jenkins.sh https://raw.githubusercontent.com/KevinGit31/depot_projet_1_file_rouge/dev/infra/install_jenkins.sh && chmod +x /tmp/install_jenkins.sh && sudo /bin/bash /tmp/install_jenkins.sh)
          # elif [[ -n "$HNAME | grep "nexus" ]]; then
          # CMDSCRIPT2=$(sudo wget -O /tmp/install_nexus.sh https://raw.githubusercontent.com/KevinGit31/depot_projet_1_file_rouge/dev/infra/install_nexus.sh && chmod +x /tmp/install_nexus.sh && sudo /bin/bash /tmp/install_nexus.sh)
          # elif [[ -n "$HNAME | grep "qcm" ]]; then
          # CMDSCRIPT3=$(sudo wget -O /tmp/install_qcm.sh https://raw.githubusercontent.com/KevinGit31/depot_projet_1_file_rouge/dev/infra/install_qcm.sh && chmod +x /tmp/install_qcm.sh && sudo /bin/bash /tmp/install_qcm.sh)
          # fi
      Tags:
       - Key: Name
         Value: !Ref TypeName

  # Eth0:
  #   Type: AWS::EC2::NetworkInterface
  #   Properties:
  #     Description: eth0
  #     SubnetId: !Ref SubnetIdPub
  #     GroupSet:  !Ref 'SecurityGroupNameList'

#      SecurityGroupIds:
#        - !Ref SecurityGroupId

  Eth1:
    Type: AWS::EC2::NetworkInterface
    Properties:
      Description: eth1
      GroupSet:  !Ref 'SecurityGroupNameList'
      PrivateIpAddresses:
      - PrivateIpAddress: !Ref 'PrivateIP'
        Primary: 'True'
      SourceDestCheck: 'true'
      SubnetId: !Ref 'SubnetIdPriv'
      Tags:
      - Key: Name
        Value: Interface 1
      - Key: Interface
        Value: eth1

  NetworkInterfaceAttachment:
    Type: AWS::EC2::NetworkInterfaceAttachment
    Properties:
        InstanceId:
          Ref: EC2Instance
        NetworkInterfaceId:
          Ref: Eth1
        DeviceIndex: 1
  IPAddress:
    Type: AWS::EC2::EIP
  IPAssoc:
    Type: AWS::EC2::EIPAssociation
    Properties:
      InstanceId: !Ref 'EC2Instance'
      EIP: !Ref 'IPAddress'
  # Elastic1EIP:
  #   Type: AWS::EC2::EIP
  # #   DependsOn: AttachGateway
  #   Properties:
  #       InstanceId:
  #         Ref: EC2Instance
  #       NetworkInterfaceId:
  #       DeviceIndex: 0
#      Domain: VPC

#   NatGateway2EIP:
#     Type: AWS::EC2::EIP
#   #   DependsOn: AttachGateway
#     Properties:
#         InstanceId:
#           Ref: EC2Instance
# #      Domain: VPC

#   NatGateway3EIP:
#     Type: AWS::EC2::EIP
#   #   DependsOn: AttachGateway
#     Properties:
#         InstanceId:
#           Ref: EC2Instance
# #      Domain: VPC

#   NatGateway4EIP:
#     Type: AWS::EC2::EIP
#   #   DependsOn: AttachGateway
#     Properties:
#         InstanceId:
#           Ref: EC2Instance
# #      Domain: VPC


#Outputs:
#  WebsiteURL:
#    Description: URL for newly created LAMP stack
#    Value: !Join
#      - ''
#      - - 'http://'
#        - !GetAtt
#          - EC2Instance
#          - PublicDnsName


